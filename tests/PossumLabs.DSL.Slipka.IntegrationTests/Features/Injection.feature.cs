// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace PossumLabs.DSL.Slipka.IntegrationTests.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class InjectionFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = new string[] {
                "Slipka"};
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en"), "Features", "Injection", "\tMake sure that recorded responses work correctly", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "Injection.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute(Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass)]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async global::System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 5
#line hidden
            global::Reqnroll.Table table45 = new global::Reqnroll.Table(new string[] {
                        "var",
                        "Destination"});
            table45.AddRow(new string[] {
                        "P1",
                        "http://PossumLabs.com"});
#line 6
 await testRunner.GivenAsync("the Slipka Proxy", ((string)(null)), table45, "Given ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get Hello World")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Injection")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Slipka")]
        public async global::System.Threading.Tasks.Task GetHelloWorld()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Get Hello World", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table46 = new global::Reqnroll.Table(new string[] {
                            "Uri",
                            "Response Content",
                            "StatusCode",
                            "Method"});
                table46.AddRow(new string[] {
                            "/test",
                            "Hello World",
                            "200",
                            "GET"});
#line 11
 await testRunner.GivenAsync("the Proxy \'P1\' injects the calls", ((string)(null)), table46, "Given ");
#line hidden
                global::Reqnroll.Table table47 = new global::Reqnroll.Table(new string[] {
                            "var",
                            "Host",
                            "Path",
                            "Method"});
                table47.AddRow(new string[] {
                            "C1",
                            "P1.ProxyUri",
                            "test",
                            "GET"});
#line 14
 await testRunner.AndAsync("the Call", ((string)(null)), table47, "And ");
#line hidden
#line 17
 await testRunner.WhenAsync("the Call \'C1\' is executed", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table48 = new global::Reqnroll.Table(new string[] {
                            "Response Content",
                            "StatusCode"});
                table48.AddRow(new string[] {
                            "Hello World",
                            "200"});
#line 18
 await testRunner.ThenAsync("\'C1\' has the values", ((string)(null)), table48, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Error response")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Injection")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Slipka")]
        public async global::System.Threading.Tasks.Task ErrorResponse()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Error response", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table49 = new global::Reqnroll.Table(new string[] {
                            "Uri",
                            "Response Content",
                            "StatusCode",
                            "Method"});
                table49.AddRow(new string[] {
                            "/test",
                            "my error",
                            "500",
                            "GET"});
#line 23
 await testRunner.GivenAsync("the Proxy \'P1\' injects the calls", ((string)(null)), table49, "Given ");
#line hidden
                global::Reqnroll.Table table50 = new global::Reqnroll.Table(new string[] {
                            "var",
                            "Host",
                            "Path",
                            "Method"});
                table50.AddRow(new string[] {
                            "C1",
                            "P1.ProxyUri",
                            "test",
                            "GET"});
#line 26
 await testRunner.AndAsync("the Call", ((string)(null)), table50, "And ");
#line hidden
#line 29
 await testRunner.WhenAsync("the Call \'C1\' is executed", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table51 = new global::Reqnroll.Table(new string[] {
                            "Response Content",
                            "StatusCode"});
                table51.AddRow(new string[] {
                            "my error",
                            "500"});
#line 30
 await testRunner.ThenAsync("\'C1\' has the values", ((string)(null)), table51, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Other methods")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Injection")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Slipka")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("GET", "null", "", "Requests data from a specified resource", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("POST", "{}", "\"{}\"", "Submits data to be processed to a specified resource", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("PUT", "{}", "\"{}\"", "Uploads a representation of the specified URI", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("DELETE", "null", "", "Deletes the specified resource", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("OPTIONS", "null", "", "Returns the HTTP methods that the server supports", null)]
        public async global::System.Threading.Tasks.Task OtherMethods(string method, string body, string responseContent, string description, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Method", method);
            argumentsOfScenario.Add("Body", body);
            argumentsOfScenario.Add("ResponseContent", responseContent);
            argumentsOfScenario.Add("Description", description);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Other methods", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table52 = new global::Reqnroll.Table(new string[] {
                            "Uri",
                            "Response Content",
                            "StatusCode",
                            "Method"});
                table52.AddRow(new string[] {
                            "/test",
                            string.Format("{0}", body),
                            "200",
                            string.Format("{0}", method)});
#line 35
 await testRunner.GivenAsync("the Proxy \'P1\' injects the calls", ((string)(null)), table52, "Given ");
#line hidden
                global::Reqnroll.Table table53 = new global::Reqnroll.Table(new string[] {
                            "var",
                            "Host",
                            "Path",
                            "Method"});
                table53.AddRow(new string[] {
                            "C1",
                            "P1.ProxyUri",
                            "test",
                            string.Format("{0}", method)});
#line 38
 await testRunner.AndAsync("the Call", ((string)(null)), table53, "And ");
#line hidden
#line 41
 await testRunner.WhenAsync("the Call \'C1\' is executed", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table54 = new global::Reqnroll.Table(new string[] {
                            "Response Content",
                            "StatusCode"});
                table54.AddRow(new string[] {
                            string.Format("{0}", responseContent),
                            "200"});
#line 42
 await testRunner.ThenAsync("\'C1\' has the values", ((string)(null)), table54, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Delay")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Injection")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Slipka")]
        public async global::System.Threading.Tasks.Task Delay()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Delay", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 53
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table55 = new global::Reqnroll.Table(new string[] {
                            "Uri",
                            "Response Content",
                            "StatusCode",
                            "Method",
                            "Duration"});
                table55.AddRow(new string[] {
                            "/test",
                            "Hello World",
                            "200",
                            "GET",
                            "1000"});
#line 54
 await testRunner.GivenAsync("the Proxy \'P1\' injects the calls", ((string)(null)), table55, "Given ");
#line hidden
                global::Reqnroll.Table table56 = new global::Reqnroll.Table(new string[] {
                            "var",
                            "Host",
                            "Path",
                            "Method"});
                table56.AddRow(new string[] {
                            "C1",
                            "P1.ProxyUri",
                            "test",
                            "GET"});
#line 57
 await testRunner.AndAsync("the Call", ((string)(null)), table56, "And ");
#line hidden
#line 60
 await testRunner.WhenAsync("the Call \'C1\' is executed", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table57 = new global::Reqnroll.Table(new string[] {
                            "Duration"});
                table57.AddRow(new string[] {
                            "> 1000"});
#line 61
 await testRunner.ThenAsync("\'C1\' has the values", ((string)(null)), table57, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Make sure that we don\'t forward the original call")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Injection")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Slipka")]
        public async global::System.Threading.Tasks.Task MakeSureThatWeDontForwardTheOriginalCall()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Make sure that we don\'t forward the original call", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 66
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table58 = new global::Reqnroll.Table(new string[] {
                            "var",
                            "Destination"});
                table58.AddRow(new string[] {
                            "P2",
                            "P1.ProxyUri"});
#line 67
 await testRunner.GivenAsync("the Slipka Proxy", ((string)(null)), table58, "Given ");
#line hidden
                global::Reqnroll.Table table59 = new global::Reqnroll.Table(new string[] {
                            "Uri",
                            "Response Content",
                            "StatusCode",
                            "Method"});
                table59.AddRow(new string[] {
                            "/test",
                            "Hello World",
                            "200",
                            "GET"});
#line 70
 await testRunner.GivenAsync("the Proxy \'P2\' injects the calls", ((string)(null)), table59, "Given ");
#line hidden
                global::Reqnroll.Table table60 = new global::Reqnroll.Table(new string[] {
                            "var",
                            "Host",
                            "Path",
                            "Method"});
                table60.AddRow(new string[] {
                            "C1",
                            "P2.ProxyUri",
                            "test",
                            "GET"});
#line 73
 await testRunner.AndAsync("the Call", ((string)(null)), table60, "And ");
#line hidden
#line 76
 await testRunner.WhenAsync("the Call \'C1\' is executed", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 77
 await testRunner.ThenAsync("retrieving the calls from Proxy \'P1\' as \'RC\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table61 = new global::Reqnroll.Table(new string[] {
                            "Count"});
                table61.AddRow(new string[] {
                            "0"});
#line 78
 await testRunner.AndAsync("\'RC\' has the values", ((string)(null)), table61, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("inject by header")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Injection")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Slipka")]
        public async global::System.Threading.Tasks.Task InjectByHeader()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("inject by header", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 82
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("inject by method")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Injection")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Slipka")]
        public async global::System.Threading.Tasks.Task InjectByMethod()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("inject by method", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 84
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table62 = new global::Reqnroll.Table(new string[] {
                            "Response Content",
                            "StatusCode",
                            "Method"});
                table62.AddRow(new string[] {
                            "Hello World",
                            "200",
                            "GET"});
#line 85
 await testRunner.GivenAsync("the Proxy \'P1\' injects the calls", ((string)(null)), table62, "Given ");
#line hidden
                global::Reqnroll.Table table63 = new global::Reqnroll.Table(new string[] {
                            "var",
                            "Host",
                            "Path",
                            "Method"});
                table63.AddRow(new string[] {
                            "C1",
                            "P1.ProxyUri",
                            "test",
                            "GET"});
#line 88
 await testRunner.AndAsync("the Call", ((string)(null)), table63, "And ");
#line hidden
#line 91
 await testRunner.WhenAsync("the Call \'C1\' is executed", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table64 = new global::Reqnroll.Table(new string[] {
                            "Response Content",
                            "StatusCode"});
                table64.AddRow(new string[] {
                            "Hello World",
                            "200"});
#line 92
 await testRunner.ThenAsync("\'C1\' has the values", ((string)(null)), table64, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("inject by regular expression in path")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Injection")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Slipka")]
        public async global::System.Threading.Tasks.Task InjectByRegularExpressionInPath()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("inject by regular expression in path", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 96
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table65 = new global::Reqnroll.Table(new string[] {
                            "Uri",
                            "Response Content",
                            "StatusCode"});
                table65.AddRow(new string[] {
                            "/t[est]+",
                            "Hello World",
                            "200"});
#line 97
 await testRunner.GivenAsync("the Proxy \'P1\' injects the calls", ((string)(null)), table65, "Given ");
#line hidden
                global::Reqnroll.Table table66 = new global::Reqnroll.Table(new string[] {
                            "var",
                            "Host",
                            "Path",
                            "Method"});
                table66.AddRow(new string[] {
                            "C1",
                            "P1.ProxyUri",
                            "test",
                            "GET"});
#line 100
 await testRunner.AndAsync("the Call", ((string)(null)), table66, "And ");
#line hidden
#line 103
 await testRunner.WhenAsync("the Call \'C1\' is executed", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table67 = new global::Reqnroll.Table(new string[] {
                            "Response Content",
                            "StatusCode"});
                table67.AddRow(new string[] {
                            "Hello World",
                            "200"});
#line 104
 await testRunner.ThenAsync("\'C1\' has the values", ((string)(null)), table67, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("inject by regular expression in header")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Injection")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Slipka")]
        public async global::System.Threading.Tasks.Task InjectByRegularExpressionInHeader()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("inject by regular expression in header", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 108
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
