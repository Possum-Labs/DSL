// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace PossumLabs.DSL.Web.IntegrationTests.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class UnderSelectorFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = new string[] {
                "injected-html"};
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en"), "features", "UnderSelector", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "UnderSelector.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute(Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass)]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Div")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UnderSelector")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("injected-html")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("01 simple", "under-target", "input-target", "Bob", "<div>under-target<label>input-target<input type=\"text\"></input></label></div>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("02 label", "under-target", "input-target", "Bob", "<div><label>under-target</label><label>input-target<input type=\"text\"></input></l" +
            "abel></div>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("03 b", "under-target", "input-target", "Bob", "<div><b>under-target</b><label>input-target<input type=\"text\"></input></label></d" +
            "iv>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("04 h1", "under-target", "input-target", "Bob", "<div><h1>under-target</h1><label>input-target<input type=\"text\"></input></label><" +
            "/div>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("05 h2", "under-target", "input-target", "Bob", "<div><h2>under-target</h2><label>input-target<input type=\"text\"></input></label><" +
            "/div>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("06 h3", "under-target", "input-target", "Bob", "<div><h3>under-target</h3><label>input-target<input type=\"text\"></input></label><" +
            "/div>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("07 h4", "under-target", "input-target", "Bob", "<div><h4>under-target</h4><label>input-target<input type=\"text\"></input></label><" +
            "/div>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("08 h5", "under-target", "input-target", "Bob", "<div><h5>under-target</h5><label>input-target<input type=\"text\"></input></label><" +
            "/div>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("09 h6", "under-target", "input-target", "Bob", "<div><h6>under-target</h6><label>input-target<input type=\"text\"></input></label><" +
            "/div>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("10 input", "under-target", "input-target", "Bob", "<div><input value=\"under-target\"></input><label>input-target<input type=\"text\"></" +
            "input></label></div>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("11 span", "under-target", "input-target", "Bob", "<div><span>under-target</span><label>input-target<input type=\"text\"></input></lab" +
            "el></div>", null)]
        public async global::System.Threading.Tasks.Task Div(string description, string under, string target, string value, string html, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("description", description);
            argumentsOfScenario.Add("under", under);
            argumentsOfScenario.Add("target", target);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("html", html);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Div", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table61 = new global::Reqnroll.Table(new string[] {
                            "Html"});
                table61.AddRow(new string[] {
                            string.Format("{0}", html)});
#line 5
 await testRunner.GivenAsync("injecting browser content", ((string)(null)), table61, "Given ");
#line hidden
#line 8
 await testRunner.WhenAsync(string.Format("under \'{0}\' entering \'{1}\' into element \'{2}\'", under, value, target), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 9
 await testRunner.ThenAsync(string.Format("under \'{0}\' the element \'{1}\' has the value \'{2}\'", under, target, value), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Div with row role")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UnderSelector")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("injected-html")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("01 simple", "under-target", "input-target", "Bob", "<div role=\"row\"><div>under-target<label>input-target<input type=\"text\"></input></" +
            "label></div></div>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("02 label", "under-target", "input-target", "Bob", "<div role=\"row\"><div><label>under-target</label><label>input-target<input type=\"t" +
            "ext\"></input></label></div></div>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("03 b", "under-target", "input-target", "Bob", "<div role=\"row\"><div><b>under-target</b><label>input-target<input type=\"text\"></i" +
            "nput></label></div></div>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("04 h1", "under-target", "input-target", "Bob", "<div role=\"row\"><div><h1>under-target</h1><label>input-target<input type=\"text\"><" +
            "/input></label></div></div>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("05 h2", "under-target", "input-target", "Bob", "<div role=\"row\"><div><h2>under-target</h2><label>input-target<input type=\"text\"><" +
            "/input></label></div></div>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("06 h3", "under-target", "input-target", "Bob", "<div role=\"row\"><div><h3>under-target</h3><label>input-target<input type=\"text\"><" +
            "/input></label></div></div>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("07 h4", "under-target", "input-target", "Bob", "<div role=\"row\"><div><h4>under-target</h4><label>input-target<input type=\"text\"><" +
            "/input></label></div></div>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("08 h5", "under-target", "input-target", "Bob", "<div role=\"row\"><div><h5>under-target</h5><label>input-target<input type=\"text\"><" +
            "/input></label></div></div>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("09 h6", "under-target", "input-target", "Bob", "<div role=\"row\"><div><h6>under-target</h6><label>input-target<input type=\"text\"><" +
            "/input></label></div></div>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("10 input", "under-target", "input-target", "Bob", "<div role=\"row\"><div><input value=\"under-target\"></input><label>input-target<inpu" +
            "t type=\"text\"></input></label></div></div>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("11 span", "under-target", "input-target", "Bob", "<div role=\"row\"><div><span>under-target</span><label>input-target<input type=\"tex" +
            "t\"></input></label></div></div>", null)]
        public async global::System.Threading.Tasks.Task DivWithRowRole(string description, string under, string target, string value, string html, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("description", description);
            argumentsOfScenario.Add("under", under);
            argumentsOfScenario.Add("target", target);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("html", html);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Div with row role", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 26
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table62 = new global::Reqnroll.Table(new string[] {
                            "Html"});
                table62.AddRow(new string[] {
                            string.Format("{0}", html)});
#line 27
 await testRunner.GivenAsync("injecting browser content", ((string)(null)), table62, "Given ");
#line hidden
#line 30
 await testRunner.WhenAsync(string.Format("under \'{0}\' entering \'{1}\' into element \'{2}\'", under, value, target), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 31
 await testRunner.ThenAsync(string.Format("under \'{0}\' the element \'{1}\' has the value \'{2}\'", under, target, value), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
