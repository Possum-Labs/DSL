// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace PossumLabs.DSL.Web.IntegrationTests.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class CheckableSelectorFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en"), "features", "Checkable selector", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "Checkable.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute(Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass)]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("checking inputs")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Checkable selector")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("value", "target", "checked", "<input type=\"checkbox\" id=\"i1\" name=\"target\" value=\"Bob\"></input><label for=\"i1\">" +
            "noop</label>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("label for", "target", "checked", "<input type=\"checkbox\" id=\"i1\" name=\"target\" value=\"noop\"></input><label for=\"i1\"" +
            ">Bob</label>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("label nested", "target", "checked", "<label>Bob<input type=\"checkbox\" name=\"target\" value=\"noop\"></input></label>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("no value", "target", "checked", "<label>target<input type=\"checkbox\"></input></label>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("checked", "target", "checked", "<label>target<input type=\"checkbox\" checked></input></label>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("deep nesting", "target", "checked", "<label for=\"myid\"><div><div><p><span><strong>target</strong></span></p></div></di" +
            "v><div><input id=\"myid\" type=\"checkbox\"></div></label>", null)]
        public async global::System.Threading.Tasks.Task CheckingInputs(string description, string target, string value, string html, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("description", description);
            argumentsOfScenario.Add("target", target);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("html", html);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("checking inputs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table19 = new global::Reqnroll.Table(new string[] {
                            "Html"});
                table19.AddRow(new string[] {
                            string.Format("{0}", html)});
#line 4
 await testRunner.GivenAsync("injecting browser content", ((string)(null)), table19, "Given ");
#line hidden
#line 7
 await testRunner.WhenAsync(string.Format("checking element \'{0}\'", target), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 8
 await testRunner.ThenAsync(string.Format("the element \'{0}\' has the value \'{1}\'", target, value), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("unchecking inputs")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Checkable selector")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("unchecking", "target", "unchecked", "<label>target<input type=\"checkbox\"></input></label>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("unchecking  checked", "target", "unchecked", "<label>target<input type=\"checkbox\" checked></input></label>", null)]
        public async global::System.Threading.Tasks.Task UncheckingInputs(string description, string target, string value, string html, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("description", description);
            argumentsOfScenario.Add("target", target);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("html", html);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("unchecking inputs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 19
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table20 = new global::Reqnroll.Table(new string[] {
                            "Html"});
                table20.AddRow(new string[] {
                            string.Format("{0}", html)});
#line 20
 await testRunner.GivenAsync("injecting browser content", ((string)(null)), table20, "Given ");
#line hidden
#line 23
 await testRunner.WhenAsync(string.Format("unchecking element \'{0}\'", target), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 24
 await testRunner.ThenAsync(string.Format("the element \'{0}\' has the value \'{1}\'", target, value), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("error messages checking")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Checkable selector")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("value", "target", "checked", "<label>target<input></label>", "/element was not found/", null)]
        public async global::System.Threading.Tasks.Task ErrorMessagesChecking(string description, string target, string value, string html, string error, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("description", description);
            argumentsOfScenario.Add("target", target);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("html", html);
            argumentsOfScenario.Add("error", error);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("error messages checking", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 30
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table21 = new global::Reqnroll.Table(new string[] {
                            "Html"});
                table21.AddRow(new string[] {
                            string.Format("{0}", html)});
#line 31
 await testRunner.GivenAsync("injecting browser content", ((string)(null)), table21, "Given ");
#line hidden
#line 34
 await testRunner.GivenAsync("an error is expected", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 35
 await testRunner.WhenAsync(string.Format("checking element \'{0}\'", target), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table22 = new global::Reqnroll.Table(new string[] {
                            "Message"});
                table22.AddRow(new string[] {
                            string.Format("{0}", error)});
#line 36
 await testRunner.ThenAsync("the Error has values", ((string)(null)), table22, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("error messages unchecking")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Checkable selector")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("value", "target", "checked", "<label>targe<input>t</label>", "/element was not found/", null)]
        public async global::System.Threading.Tasks.Task ErrorMessagesUnchecking(string description, string target, string value, string html, string error, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("description", description);
            argumentsOfScenario.Add("target", target);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("html", html);
            argumentsOfScenario.Add("error", error);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("error messages unchecking", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 43
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table23 = new global::Reqnroll.Table(new string[] {
                            "Html"});
                table23.AddRow(new string[] {
                            string.Format("{0}", html)});
#line 44
 await testRunner.GivenAsync("injecting browser content", ((string)(null)), table23, "Given ");
#line hidden
#line 47
 await testRunner.GivenAsync("an error is expected", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 48
 await testRunner.WhenAsync(string.Format("unchecking element \'{0}\'", target), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table24 = new global::Reqnroll.Table(new string[] {
                            "Message"});
                table24.AddRow(new string[] {
                            string.Format("{0}", error)});
#line 49
 await testRunner.ThenAsync("the Error has values", ((string)(null)), table24, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
