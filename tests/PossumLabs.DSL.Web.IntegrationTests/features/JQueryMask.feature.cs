// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace PossumLabs.DSL.Web.IntegrationTests.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class JQueryMaskFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en"), "features", "JQueryMask", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "JQueryMask.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute(Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass)]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("external enter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "JQueryMask")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Date", "#date", "11112000", "11/11/2000", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Date             zero padded", "#date", "01012000", "01/01/2000", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Hour", "#time", "111111", "11:11:11", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Date & Hour", "#date_time", "11112000111111", "11/11/2000 11:11:11", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("ZIP Code", "#cep", "80202", "80202", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("With Callbacks (open console)", "#cep_with_callback", "80202", "80202", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Crazy Zip Code", "#crazy_cep", "8020211", "8-02-02-11", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Telephone", "#phone", "12345678", "1234-5678", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Telephone with Code Area", "#phone_with_ddd", "1234567890", "(12) 3456-7890", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("US Telephone", "#phone_us", "1234567890", "(123) 456-7890", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("São Paulo Celphones", "#sp_celphones", "1234567890", "(12) 3456-7890", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Mixed Type Mask", "#mixed", "123456a", "123 456-a", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("CPF", "#cpf", "1234567890", "12.345.678-90", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("CNPJ", "#cnpj", "1234567890", "1.234/5678-90", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("With Clear If Not Match Option", "#clear-if-not-match", "01012000", "01/01/2000", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("With a fallback digit", "#fallback", "01012000", "01/01/2000", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("With selectOnFocus", "#selectonfocus", "01012000", "01/01/2000", null)]
        public async global::System.Threading.Tasks.Task ExternalEnter(string name, string id, string entry, string data, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("name", name);
            argumentsOfScenario.Add("id", id);
            argumentsOfScenario.Add("entry", entry);
            argumentsOfScenario.Add("data", data);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("external enter", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
 await testRunner.GivenAsync("navigated to \'https://igorescobar.github.io/jQuery-Mask-Plugin/\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 5
 await testRunner.WhenAsync(string.Format("entering \'{0}\' into element \'{1}\'", entry, id), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 6
 await testRunner.ThenAsync(string.Format("the element \'{0}\' has the value \'{1}\'", id, data), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("external enter and clear")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "JQueryMask")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Date", "#date", "11112000", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Date             zero padded", "#date", "01012000", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Hour", "#time", "111111", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Date & Hour", "#date_time", "11112000111111", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("ZIP Code", "#cep", "80202", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("With Callbacks (open console)", "#cep_with_callback", "80202", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Crazy Zip Code", "#crazy_cep", "8020211", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Money", "#money", "123456", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Telephone", "#phone", "1234567", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Telephone with Code Area", "#phone_with_ddd", "1234567890", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("US Telephone", "#phone_us", "1234567890", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("São Paulo Celphones", "#sp_celphones", "1234567890", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Mixed Type Mask", "#mixed", "123456a", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("CPF", "#cpf", "1234567890", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("CNPJ", "#cnpj", "1234567890", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("IP Address", "#ip_address", "123123123123", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("With Clear If Not Match Option", "#clear-if-not-match", "01012000", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("With a fallback digit", "#fallback", "01012000", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("With selectOnFocus", "#selectonfocus", "01012000", null)]
        public async global::System.Threading.Tasks.Task ExternalEnterAndClear(string name, string id, string entry, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("name", name);
            argumentsOfScenario.Add("id", id);
            argumentsOfScenario.Add("entry", entry);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("external enter and clear", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 30
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 31
 await testRunner.GivenAsync("navigated to \'https://igorescobar.github.io/jQuery-Mask-Plugin/\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 32
 await testRunner.WhenAsync(string.Format("entering \'{0}\' into element \'{1}\'", entry, id), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 33
 await testRunner.WhenAsync(string.Format("entering \'\' into element \'{0}\'", id), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 34
 await testRunner.ThenAsync(string.Format("the element \'{0}\' has the value \'\'", id), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
