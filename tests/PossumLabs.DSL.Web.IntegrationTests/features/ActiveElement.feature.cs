// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace PossumLabs.DSL.Web.IntegrationTests.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class SelectorsFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = new string[] {
                "injected-html"};
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en"), "features", "Selectors", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "ActiveElement.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute(Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass)]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("entering text inputs")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Selectors")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("injected-html")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("input for", "target", "Bob", "<label for=\"linky\">target</label><input id=\"linky\" type=\"text\"></input>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("input nested", "target", "Bob", "<label>target<input type=\"text\"></input></label>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("input aria-label", "target", "Bob", "<input type=\"text\" aria-label=\"target\"></input>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("input aria-labelledby", "t1 t2", "Bob", "<input type=\"text\" aria-labelledby= \"l1 l2\"></input><label id=\"l1\">t1</label> <la" +
            "bel id=\"l2\">t2</label>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("textarea for", "target", "Bob", "<label for=\"linky\">target</label><textarea id=\"linky\"></textarea>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("textarea nested", "target", "Bob", "<label>target<textarea></textarea></label>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("textarea aria-label", "target", "Bob", "<textarea aria-label=\"target\"></textarea>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("textarea aria-labelledby", "t1 t2", "Bob", "<textarea aria-labelledby= \"l1 l2\"></textarea><label id=\"l1\">t1</label><label id=" +
            "\"l2\">t2</label>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("input nested deeper", "target", "Bob", "<label><span><strong>target</strong></span><span><input type=\"text\"></span></labe" +
            "l>", null)]
        public async global::System.Threading.Tasks.Task EnteringTextInputs(string description, string target, string value, string html, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("description", description);
            argumentsOfScenario.Add("target", target);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("html", html);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("entering text inputs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "Html"});
                table1.AddRow(new string[] {
                            string.Format("{0}", html)});
#line 5
 await testRunner.GivenAsync("injecting browser content", ((string)(null)), table1, "Given ");
#line hidden
#line 8
 await testRunner.WhenAsync(string.Format("entering \'{0}\' into element \'{1}\'", value, target), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 9
 await testRunner.ThenAsync(string.Format("the element \'{0}\' has the value \'{1}\'", target, value), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("entering number inputs")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Selectors")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("injected-html")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("for", "target", "42", "<label for=\"linky\">target</label><input id=\"linky\" type=\"number\"></input>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("nested", "target", "42", "<label>target<input type=\"number\"></input></label >", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("aria-label", "target", "42", "<input type=\"number\" aria-label=\"target\"></input>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("aria-labelledby", "t1 t2", "42", "<input type=\"number\" aria-labelledby= \"l1 l2\"></input><label id=\"l1\">t1</label> <" +
            "label id=\"l2\">t2</label>", null)]
        public async global::System.Threading.Tasks.Task EnteringNumberInputs(string description, string target, string value, string html, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("description", description);
            argumentsOfScenario.Add("target", target);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("html", html);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("entering number inputs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "Html"});
                table2.AddRow(new string[] {
                            string.Format("{0}", html)});
#line 23
 await testRunner.GivenAsync("injecting browser content", ((string)(null)), table2, "Given ");
#line hidden
#line 26
 await testRunner.WhenAsync(string.Format("entering \'{0}\' into element \'{1}\'", value, target), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 27
 await testRunner.ThenAsync(string.Format("the element \'{0}\' has the value \'{1}\'", target, value), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("entering dropdown inputs")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Selectors")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("injected-html")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("n for", "target", "Bob", "<label for=\"linky\">target</label><select id=\"linky\"><option value=\"bad\">Bad</opti" +
            "on><option value=\"test\">Bob</option></select>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("n nested", "target", "Bob", "<label>target<select><option value=\"bad\">Bad</option><option value=\"test\">Bob</op" +
            "tion></select></label >", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("n aria-label", "target", "Bob", "<select aria-label=\"target\"><option value=\"bad\">Bad</option><option value=\"test\">" +
            "Bob</option></select>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("n name", "target", "Bob", "<select name=\"target\"><option value=\"bad\">Bad</option><option value=\"test\">Bob</o" +
            "ption></select>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("n aria-labelledby", "t1 t2", "Bob", "<select aria-labelledby= \"l1 l2\"><option value=\"bad\">Bad</option><option value=\"t" +
            "est\">Bob</option></select><label id=\"l1\">t1</label><label id=\"l2\">t2</label>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("v for", "target", "Bob", "<label for=\"linky\">target</label><select id=\"linky\"><option value=\"bad\">Bad</opti" +
            "on><option value=\"Bob\">test</option></select>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("v nested", "target", "Bob", "<label>target<select><option value=\"bad\">Bad</option><option value=\"Bob\">test</op" +
            "tion></select></label >", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("v aria-label", "target", "Bob", "<select aria-label=\"target\"><option value=\"bad\">Bad</option><option value=\"Bob\">t" +
            "est</option></select>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("v name", "target", "Bob", "<select name=\"target\"><option value=\"bad\">Bad</option><option value=\"Bob\">test</o" +
            "ption></select>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("v aria-labelledby", "t1 t2", "Bob", "<select aria-labelledby= \"l1 l2\"><option value=\"bad\">Bad</option><option value=\"B" +
            "ob\">test</option></select><label id=\"l1\">t1</label><label id=\"l2\">t2</label>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("dl for", "target", "Bob", "<label for=\"linky\">target</label><input id=\"linky\" list=\"o\"><datalist id=\"o\"><opt" +
            "ion value=\"bad\"><option value=\"Bob\"></datalist></select>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("dl nested", "target", "Bob", "<label>target<input list=\"o\"><datalist id=\"o\"><option value=\"bad\"><option value=\"" +
            "Bob\"></datalist></label >", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("dl aria-label", "target", "Bob", "<input aria-label=\"target\" list=\"o\"><datalist id=\"o\"><option value=\"bad\"><option " +
            "value=\"Bob\"></datalist>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("dl aria-labelledby", "t1 t2", "Bob", "<input aria-labelledby= \"l1 l2\" list=\"o\"><datalist id=\"o\"><option value=\"bad\"><op" +
            "tion value=\"Bob\"></datalist><label id=\"l1\">t1</label><label id=\"l2\">t2</label>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("default name", "target", "Bob", "<select name=\"target\"><option value=\"\" groupname displayorder=\"-1\"></option><opti" +
            "on value=\"bad\">Bad</option><option value=\"Bob\">test</option></select>", null)]
        public async global::System.Threading.Tasks.Task EnteringDropdownInputs(string description, string target, string value, string html, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("description", description);
            argumentsOfScenario.Add("target", target);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("html", html);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("entering dropdown inputs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 35
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "Html"});
                table3.AddRow(new string[] {
                            string.Format("{0}", html)});
#line 36
 await testRunner.GivenAsync("injecting browser content", ((string)(null)), table3, "Given ");
#line hidden
#line 39
 await testRunner.WhenAsync(string.Format("entering \'{0}\' into element \'{1}\'", value, target), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 40
 await testRunner.ThenAsync(string.Format("the element \'{0}\' has the value \'{1}\'", target, value), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("entering radio")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Selectors")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("injected-html")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("value", "target", "Bob", "<input type=\"radio\" id=\"i1\" name=\"target\" value=\"Bob\"></input><label for=\"i1\">noo" +
            "p</label>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("label for", "target", "Bob", "<input type=\"radio\" id=\"i1\" name=\"target\" value=\"noop\"></input><label for=\"i1\">Bo" +
            "b</label>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("label nested", "target", "Bob", "<label>Bob<input type=\"radio\" id=\"i1\" name=\"target\" value=\"noop\"></input></label>" +
            "", null)]
        public async global::System.Threading.Tasks.Task EnteringRadio(string description, string target, string value, string html, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("description", description);
            argumentsOfScenario.Add("target", target);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("html", html);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("entering radio", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 59
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                            "Html"});
                table4.AddRow(new string[] {
                            string.Format("{0}", html)});
#line 60
 await testRunner.GivenAsync("injecting browser content", ((string)(null)), table4, "Given ");
#line hidden
#line 63
 await testRunner.WhenAsync(string.Format("entering \'{0}\' into element \'{1}\'", value, target), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 64
 await testRunner.ThenAsync(string.Format("the element \'{0}\' has the value \'{1}\'", target, value), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("clicking")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Selectors")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("injected-html")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("0   a text", "target", "<a href = \"https://www.w3schools.com/html/\" >target</a>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("1   a title", "target", "<a href = \"https://www.w3schools.com/html/\" title=\"target\">Visit our HTML Tutoria" +
            "l</a>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("2   radio label", "target", "<input type=\"radio\" id=\"i1\" name=\"rb\" value=\"42\"></input><label for=\"i1\">target</" +
            "label>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("3   radio label", "target", "<label>target<input type=\"radio\" name=\"rb\" value=\"42\"></input></label>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("4   radio target", "target", "<input type=\"radio\" id=\"i1\" name=\"rb\" value=\"target\"></input>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("5   submit input", "submit", "<input type=\"submit\"></input>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("6   submit button", "submit", "<button type=\"submit\"></button>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("7   reset", "reset", "<input type=\"reset\"></input>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("8   button", "target", "<button>target</button>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("9   button nested", "target", "<label>target<button></button></label>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("10  button for", "target", "<label for=\"b1\">target</label><button id=\"b1\"></button>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("11  button aria-label", "target", "<button aria-label=\"target\"></button>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("12  button aria-labelledby", "t1 t2", "<button aria-labelledby= \"l1 l2\"></button><label id=\"l1\">t1</label> <label id=\"l2" +
            "\">t2</label>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("14  input button nested", "target", "<label>target<input type=\"button\"></input></label>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("15  input button for", "target", "<label for=\"b1\">target</label><input type=\"button\" id=\"b1\"></input>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("16  input button aria-label", "target", "<input type=\"button\" aria-label=\"target\"></input>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("17  input button aria-labelledby", "t1 t2", "<input type=\"button\" aria-labelledby= \"l1 l2\"></input><label id=\"l1\">t1</label> <" +
            "label id=\"l2\">t2</label>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("18  div button", "target", "<div role=\'button\'>target</div>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("19  div button label", "target", "<div role=\'button\'><label>target</label></div>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("20  div link", "target", "<div role=\'link\'>target</div>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("21  div link label", "target", "<div role=\'link\'><label>target</label></div>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("22  div menuitem", "target", "<div role=\'menuitem\'>target</div>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("23  div menuitem label", "target", "<div role=\'menuitem\'><label>target</label></div>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("24  button with a nested span", "target", "<button><span>target</span></button>", null)]
        public async global::System.Threading.Tasks.Task Clicking(string description, string target, string html, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("description", description);
            argumentsOfScenario.Add("target", target);
            argumentsOfScenario.Add("html", html);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("clicking", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 71
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table5 = new global::Reqnroll.Table(new string[] {
                            "Html"});
                table5.AddRow(new string[] {
                            string.Format("{0}", html)});
#line 72
 await testRunner.GivenAsync("injecting browser content", ((string)(null)), table5, "Given ");
#line hidden
#line 75
 await testRunner.WhenAsync(string.Format("clicking the element \'{0}\'", target), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("checkboxes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Selectors")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("injected-html")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("value", "target", "checked", "<input type=\"checkbox\" id=\"i1\" name=\"target\" value=\"Bob\"></input><label for=\"i1\">" +
            "noop</label>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("label for", "target", "checked", "<input type=\"checkbox\" id=\"i1\" name=\"stuff\" value=\"noop\"></input><label for=\"i1\">" +
            "target</label>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("label nested", "target", "checked", "<label>Bob<input type=\"checkbox\" name=\"target\" value=\"noop\"></input></label>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("no value", "target", "checked", "<label>target<input type=\"checkbox\"></input></label>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("checked", "target", "checked", "<label>target<input type=\"checkbox\" checked></input></label>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("unchecking", "target", "unchecked", "<label>target<input type=\"checkbox\"></input></label>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("unchecking  checked", "target", "unchecked", "<label>target<input type=\"checkbox\" checked></input></label>", null)]
        public async global::System.Threading.Tasks.Task Checkboxes(string description, string target, string value, string html, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("description", description);
            argumentsOfScenario.Add("target", target);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("html", html);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("checkboxes", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 104
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table6 = new global::Reqnroll.Table(new string[] {
                            "Html"});
                table6.AddRow(new string[] {
                            string.Format("{0}", html)});
#line 105
 await testRunner.GivenAsync("injecting browser content", ((string)(null)), table6, "Given ");
#line hidden
#line 108
 await testRunner.WhenAsync(string.Format("entering \'{0}\' into element \'{1}\'", value, target), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 109
 await testRunner.ThenAsync(string.Format("the element \'{0}\' has the value \'{1}\'", target, value), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("error messages")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Selectors")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("injected-html")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("value", "target", "checked", "<input type=\"checkbox\" id=\"i1\" name=\"t\" value=\"Bob\"></input><label for=\"i1\">noop<" +
            "/label>", "/element was not found/", null)]
        public async global::System.Threading.Tasks.Task ErrorMessages(string description, string target, string value, string html, string error, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("description", description);
            argumentsOfScenario.Add("target", target);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("html", html);
            argumentsOfScenario.Add("error", error);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("error messages", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 121
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table7 = new global::Reqnroll.Table(new string[] {
                            "Html"});
                table7.AddRow(new string[] {
                            string.Format("{0}", html)});
#line 122
 await testRunner.GivenAsync("injecting browser content", ((string)(null)), table7, "Given ");
#line hidden
#line 125
 await testRunner.GivenAsync("an error is expected", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 126
 await testRunner.WhenAsync(string.Format("entering \'{0}\' into element \'{1}\'", value, target), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table8 = new global::Reqnroll.Table(new string[] {
                            "Message"});
                table8.AddRow(new string[] {
                            string.Format("{0}", error)});
#line 127
 await testRunner.ThenAsync("the Error has values", ((string)(null)), table8, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
