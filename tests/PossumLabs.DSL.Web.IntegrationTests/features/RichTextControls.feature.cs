// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace PossumLabs.DSL.Web.IntegrationTests.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class RichTextControlsFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en"), "features", "Rich Text Controls", "all id\'s for the text area should be id=\"myeditor\"", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "RichTextControls.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute(Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass)]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("entering text inputs CKEditor 4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Rich Text Controls")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("textarea for", "target", "Bob", "^<p>Bob<\\/p>", "<label for=\"myeditor\">target</label><textarea id=\"myeditor\"></textarea>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("textarea following", "target", "Bob", "^<p>Bob<\\/p>", "<label>target</label><textarea id=\"myeditor\"></textarea>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("textarea nested", "target", "Bob", "^<p>Bob<\\/p>", "<label>target<textarea id=\"myeditor\"></textarea></label>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("textarea aria-label", "target", "Bob", "^<p>Bob<\\/p>", "<textarea id=\"myeditor\" aria-label=\"target\"></textarea>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("textarea aria-labelledby", "t1 t2", "Bob", "^<p>Bob<\\/p>", "<textarea id=\"myeditor\" aria-labelledby= \"l1 l2\"></textarea><label id=\"l1\">t1</la" +
            "bel><label id=\"l2\">t2</label>", null)]
        public async global::System.Threading.Tasks.Task EnteringTextInputsCKEditor4(string description, string target, string value, string result, string html, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("description", description);
            argumentsOfScenario.Add("target", target);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            argumentsOfScenario.Add("html", html);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("entering text inputs CKEditor 4", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table35 = new global::Reqnroll.Table(new string[] {
                            "CKEditor4"});
                table35.AddRow(new string[] {
                            string.Format("{0}", html)});
#line 6
 await testRunner.GivenAsync("injecting browser content", ((string)(null)), table35, "Given ");
#line hidden
#line 9
 await testRunner.WhenAsync(string.Format("entering \'{0}\' into element \'{1}\'", value, target), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 10
 await testRunner.ThenAsync(string.Format("the element \'{0}\' has the value \'/{1}/\'", target, result), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("entering text inputs CKEditor 5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Rich Text Controls")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("textarea for", "target", "Bob", "Bob", "<label for=\"myeditor\">target</label><textarea id=\"myeditor\"></textarea>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("textarea following", "target", "Bob", "Bob", "<label>target</label><textarea id=\"myeditor\"></textarea>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("textarea nested", "target", "Bob", "Bob", "<label>target<textarea id=\"myeditor\"></textarea></label>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("textarea aria-label", "target", "Bob", "Bob", "<textarea id=\"myeditor\" aria-label=\"target\"></textarea>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("textarea aria-labelledby", "t1 t2", "Bob", "Bob", "<textarea id=\"myeditor\" aria-labelledby= \"l1 l2\"></textarea><label id=\"l1\">t1</la" +
            "bel><label id=\"l2\">t2</label>", null)]
        public async global::System.Threading.Tasks.Task EnteringTextInputsCKEditor5(string description, string target, string value, string result, string html, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("description", description);
            argumentsOfScenario.Add("target", target);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            argumentsOfScenario.Add("html", html);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("entering text inputs CKEditor 5", "waiting on a framework change", tagsOfScenario, argumentsOfScenario, featureTags);
#line 20
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table36 = new global::Reqnroll.Table(new string[] {
                            "CKEditor5"});
                table36.AddRow(new string[] {
                            string.Format("{0}", html)});
#line 22
 await testRunner.GivenAsync("injecting browser content", ((string)(null)), table36, "Given ");
#line hidden
#line 25
 await testRunner.WhenAsync(string.Format("entering \'{0}\' into element \'{1}\'", value, target), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 26
 await testRunner.ThenAsync(string.Format("the element \'{0}\' has the value \'{1}\'", target, result), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("entering text inputs Tiny MCE 4.5.5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Rich Text Controls")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("textarea for", "target", "Bob", "^<p>Bob<\\/p>", "<label for=\"myeditor\">target</label><textarea id=\"myeditor\"></textarea>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("textarea nested", "target", "Bob", "^<p>Bob<\\/p>", "<label>target<textarea id=\"myeditor\"></textarea></label>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("textarea aria-label", "target", "Bob", "^<p>Bob<\\/p>", "<textarea id=\"myeditor\" aria-label=\"target\"></textarea>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("textarea aria-labelledby", "t1 t2", "Bob", "^<p>Bob<\\/p>", "<textarea id=\"myeditor\" aria-labelledby= \"l1 l2\"></textarea><label id=\"l1\">t1</la" +
            "bel><label id=\"l2\">t2</label>", null)]
        public async global::System.Threading.Tasks.Task EnteringTextInputsTinyMCE4_5_5(string description, string target, string value, string result, string html, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("description", description);
            argumentsOfScenario.Add("target", target);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            argumentsOfScenario.Add("html", html);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("entering text inputs Tiny MCE 4.5.5", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 35
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table37 = new global::Reqnroll.Table(new string[] {
                            "TinyMCE4"});
                table37.AddRow(new string[] {
                            string.Format("{0}", html)});
#line 36
 await testRunner.GivenAsync("injecting browser content", ((string)(null)), table37, "Given ");
#line hidden
#line 39
 await testRunner.WhenAsync(string.Format("entering \'{0}\' into element \'{1}\'", value, target), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 40
 await testRunner.ThenAsync(string.Format("the element \'{0}\' has the value \'/{1}/\'", target, result), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("entering text inputs Tiny MCE 5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Rich Text Controls")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("textarea for", "target", "Bob", "^<p>Bob<\\/p>", "<label for=\"myeditor\">target</label><textarea id=\"myeditor\"></textarea>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("textarea following", "target", "Bob", "^<p>Bob<\\/p>", "<label>target</label><textarea id=\"myeditor\"></textarea>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("textarea nested", "target", "Bob", "^<p>Bob<\\/p>", "<label>target<textarea id=\"myeditor\"></textarea></label>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("textarea aria-label", "target", "Bob", "^<p>Bob<\\/p>", "<textarea id=\"myeditor\" aria-label=\"target\"></textarea>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("textarea aria-labelledby", "t1 t2", "Bob", "^<p>Bob<\\/p>", "<textarea id=\"myeditor\" aria-labelledby= \"l1 l2\"></textarea><label id=\"l1\">t1</la" +
            "bel><label id=\"l2\">t2</label>", null)]
        public async global::System.Threading.Tasks.Task EnteringTextInputsTinyMCE5(string description, string target, string value, string result, string html, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("description", description);
            argumentsOfScenario.Add("target", target);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            argumentsOfScenario.Add("html", html);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("entering text inputs Tiny MCE 5", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 49
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table38 = new global::Reqnroll.Table(new string[] {
                            "TinyMCE5"});
                table38.AddRow(new string[] {
                            string.Format("{0}", html)});
#line 50
 await testRunner.GivenAsync("injecting browser content", ((string)(null)), table38, "Given ");
#line hidden
#line 53
 await testRunner.WhenAsync(string.Format("entering \'{0}\' into element \'{1}\'", value, target), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 54
 await testRunner.ThenAsync(string.Format("the element \'{0}\' has the value \'/{1}/\'", target, result), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
