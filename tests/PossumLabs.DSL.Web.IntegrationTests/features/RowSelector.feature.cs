// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace PossumLabs.DSL.Web.IntegrationTests.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class RowSelectorFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = new string[] {
                "injected-html"};
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en"), "features", "Row Selector", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "RowSelector.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute(Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass)]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("table row")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row Selector")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("injected-html")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("01 simple", "row1", "target", "Bob", "<td>row1<td><td><label>target<input type=\"text\"></input></label></td>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("02 label", "row1", "target", "Bob", "<td><label>row1</label><td><td><label>target<input type=\"text\"></input></label></" +
            "td>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("03 b", "row1", "target", "Bob", "<td><b>row1</b><td><td><label>target<input type=\"text\"></input></label></td>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("04 h1", "row1", "target", "Bob", "<td><h1>row1</h1><td><td><label>target<input type=\"text\"></input></label></td>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("05 h2", "row1", "target", "Bob", "<td><h2>row1</h2><td><td><label>target<input type=\"text\"></input></label></td>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("06 h3", "row1", "target", "Bob", "<td><h3>row1</h3><td><td><label>target<input type=\"text\"></input></label></td>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("07 h4", "row1", "target", "Bob", "<td><h4>row1</h4><td><td><label>target<input type=\"text\"></input></label></td>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("08 h5", "row1", "target", "Bob", "<td><h5>row1</h5><td><td><label>target<input type=\"text\"></input></label></td>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("09 h6", "row1", "target", "Bob", "<td><h6>row1</h6><td><td><label>target<input type=\"text\"></input></label></td>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("10 input", "row1", "target", "Bob", "<td><input value=\"row1\"></input><td><td><label>target<input type=\"text\"></input><" +
            "/label></td>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("11 span", "row1", "target", "Bob", "<td><span>row1</span><td><td><label>target<input type=\"text\"></input></label></td" +
            ">", null)]
        public async global::System.Threading.Tasks.Task TableRow(string description, string row, string target, string value, string html, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("description", description);
            argumentsOfScenario.Add("row", row);
            argumentsOfScenario.Add("target", target);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("html", html);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("table row", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table39 = new global::Reqnroll.Table(new string[] {
                            "TableRow"});
                table39.AddRow(new string[] {
                            string.Format("{0}", html)});
#line 5
 await testRunner.GivenAsync("injecting browser content", ((string)(null)), table39, "Given ");
#line hidden
#line 8
 await testRunner.WhenAsync(string.Format("for row \'{0}\' entering \'{1}\' into element \'{2}\'", row, value, target), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 9
 await testRunner.ThenAsync(string.Format("for row \'{0}\' the element \'{1}\' has the value \'{2}\'", row, target, value), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("div row")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row Selector")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("injected-html")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("01 simple", "row1", "target", "Bob", "<div role=\"row\">row1<label>target<input type=\"text\"></input></label></div>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("02 label", "row1", "target", "Bob", "<div role=\"row\"><label>row1</label><label>target<input type=\"text\"></input></labe" +
            "l></div>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("03 b", "row1", "target", "Bob", "<div role=\"row\"><b>row1</b><label>target<input type=\"text\"></input></label></div>" +
            "", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("04 h1", "row1", "target", "Bob", "<div role=\"row\"><h1>row1</h1><label>target<input type=\"text\"></input></label></di" +
            "v>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("05 h2", "row1", "target", "Bob", "<div role=\"row\"><h2>row1</h2><label>target<input type=\"text\"></input></label></di" +
            "v>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("06 h3", "row1", "target", "Bob", "<div role=\"row\"><h3>row1</h3><label>target<input type=\"text\"></input></label></di" +
            "v>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("07 h4", "row1", "target", "Bob", "<div role=\"row\"><h4>row1</h4><label>target<input type=\"text\"></input></label></di" +
            "v>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("08 h5", "row1", "target", "Bob", "<div role=\"row\"><h5>row1</h5><label>target<input type=\"text\"></input></label></di" +
            "v>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("09 h6", "row1", "target", "Bob", "<div role=\"row\"><h6>row1</h6><label>target<input type=\"text\"></input></label></di" +
            "v>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("10 input", "row1", "target", "Bob", "<div role=\"row\"><input value=\"row1\"></input><label>target<input type=\"text\"></inp" +
            "ut></label></div>", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("11 span", "row1", "target", "Bob", "<div role=\"row\"><span>row1</span><label>target<input type=\"text\"></input></label>" +
            "</div>", null)]
        public async global::System.Threading.Tasks.Task DivRow(string description, string row, string target, string value, string html, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("description", description);
            argumentsOfScenario.Add("row", row);
            argumentsOfScenario.Add("target", target);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("html", html);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("div row", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 25
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table40 = new global::Reqnroll.Table(new string[] {
                            "Html"});
                table40.AddRow(new string[] {
                            string.Format("{0}", html)});
#line 26
 await testRunner.GivenAsync("injecting browser content", ((string)(null)), table40, "Given ");
#line hidden
#line 29
 await testRunner.WhenAsync(string.Format("for row \'{0}\' entering \'{1}\' into element \'{2}\'", row, value, target), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 30
 await testRunner.ThenAsync(string.Format("for row \'{0}\' the element \'{1}\' has the value \'{2}\'", row, target, value), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
