// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Selenium_Tables
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class TableSelectorsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "Tables.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Table Selectors", null, ProgrammingLanguage.CSharp, new string[] {
                        "SingleBrowser",
                        "injected-html"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Table Selectors")))
            {
                global::Selenium_Tables.TableSelectorsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void EnteringDataIntoTable(string description, string target, string value, string table, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Entering data into table", null, exampleTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Table"});
            table1.AddRow(new string[] {
                        string.Format("{0}", table)});
#line 5
 testRunner.Given("injecting browser content", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Col1"});
            table2.AddRow(new string[] {
                        string.Format("{0}", target),
                        string.Format("{0}", value)});
#line 8
 testRunner.When("entering into Table", ((string)(null)), table2, "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Col1"});
            table3.AddRow(new string[] {
                        string.Format("{0}", target),
                        string.Format("{0}", value)});
#line 11
 testRunner.Then("the Table has values", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Entering data into table: th simple text input")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Table Selectors")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SingleBrowser")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("injected-html")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "th simple text input")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:description", "th simple text input")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:target", "target")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:value", "Bob")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:table", "<tr><th>Key</th><th>Col1</th></tr><tr><td>target</td><td><input type=\"text\"/></td" +
            "></tr>")]
        public virtual void EnteringDataIntoTable_ThSimpleTextInput()
        {
#line 4
this.EnteringDataIntoTable("th simple text input", "target", "Bob", "<tr><th>Key</th><th>Col1</th></tr><tr><td>target</td><td><input type=\"text\"/></td" +
                    "></tr>", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Entering data into table: td simple text input")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Table Selectors")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SingleBrowser")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("injected-html")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "td simple text input")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:description", "td simple text input")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:target", "target")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:value", "Bob")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:table", "<tr><td>Key</td><td>Col1</td></tr><tr><td>target</td><td><input type=\"text\"/></td" +
            "></tr>")]
        public virtual void EnteringDataIntoTable_TdSimpleTextInput()
        {
#line 4
this.EnteringDataIntoTable("td simple text input", "target", "Bob", "<tr><td>Key</td><td>Col1</td></tr><tr><td>target</td><td><input type=\"text\"/></td" +
                    "></tr>", ((string[])(null)));
#line hidden
        }
        
        public virtual void KeyHeirarchy(string description, string target, string value, string table, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Key heirarchy", null, exampleTags);
#line 20
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Table"});
            table4.AddRow(new string[] {
                        string.Format("{0}", table)});
#line 21
 testRunner.Given("injecting browser content", ((string)(null)), table4, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Col1"});
            table5.AddRow(new string[] {
                        string.Format("{0}", target),
                        string.Format("{0}", value)});
#line 24
 testRunner.Then("the Table has values", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Key heirarchy: First column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Table Selectors")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SingleBrowser")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("injected-html")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "First column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:description", "First column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:target", "target")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:value", "Bob")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:table", "<tr><td>Key 1</td><td>Key 2</td><td>Col1</td></tr><tr><td>target</td><td></td><td" +
            ">Bob</td></tr>")]
        public virtual void KeyHeirarchy_FirstColumn()
        {
#line 20
this.KeyHeirarchy("First column", "target", "Bob", "<tr><td>Key 1</td><td>Key 2</td><td>Col1</td></tr><tr><td>target</td><td></td><td" +
                    ">Bob</td></tr>", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Key heirarchy: Second column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Table Selectors")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SingleBrowser")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("injected-html")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Second column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:description", "Second column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:target", "target")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:value", "Bob")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:table", "<tr><td>Key 1</td><td>Key 2</td><td>Col1</td></tr><tr><td></td><td>target</td><td" +
            ">Bob</td></tr>")]
        public virtual void KeyHeirarchy_SecondColumn()
        {
#line 20
this.KeyHeirarchy("Second column", "target", "Bob", "<tr><td>Key 1</td><td>Key 2</td><td>Col1</td></tr><tr><td></td><td>target</td><td" +
                    ">Bob</td></tr>", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Key heirarchy: Prioritize First")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Table Selectors")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SingleBrowser")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("injected-html")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Prioritize First")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:description", "Prioritize First")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:target", "target")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:value", "Bob")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:table", "<tr><td>Key 1</td><td>Key 2</td><td>Col1</td></tr><tr><td></td><td>target</td><td" +
            ">Wrong</td></tr><tr><td>target</td><td></td><td>Bob</td></tr>")]
        public virtual void KeyHeirarchy_PrioritizeFirst()
        {
#line 20
this.KeyHeirarchy("Prioritize First", "target", "Bob", "<tr><td>Key 1</td><td>Key 2</td><td>Col1</td></tr><tr><td></td><td>target</td><td" +
                    ">Wrong</td></tr><tr><td>target</td><td></td><td>Bob</td></tr>", ((string[])(null)));
#line hidden
        }
        
        public virtual void SpecifyKeyColumn(string description, string target, string value, string table, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("specify key column", null, exampleTags);
#line 34
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Table"});
            table6.AddRow(new string[] {
                        string.Format("{0}", table)});
#line 35
 testRunner.Given("injecting browser content", ((string)(null)), table6, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Col1"});
            table7.AddRow(new string[] {
                        string.Format("{0}", target),
                        string.Format("{0}", value)});
#line 38
 testRunner.Then("the Table has values", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("specify key column: Simple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Table Selectors")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SingleBrowser")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("injected-html")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Simple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:description", "Simple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:target", "target")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:value", "Bob")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:table", "<tr><td>Key</td><td>other</td><td>Col1</td></tr><tr><td></td><td>target</td><td>W" +
            "rong</td></tr><tr><td>target</td><td></td><td>Bob</td></tr>")]
        public virtual void SpecifyKeyColumn_Simple()
        {
#line 34
this.SpecifyKeyColumn("Simple", "target", "Bob", "<tr><td>Key</td><td>other</td><td>Col1</td></tr><tr><td></td><td>target</td><td>W" +
                    "rong</td></tr><tr><td>target</td><td></td><td>Bob</td></tr>", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("specify key column: not first")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Table Selectors")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SingleBrowser")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("injected-html")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "not first")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:description", "not first")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:target", "target")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:value", "Bob")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:table", "<tr><td>other</td><td>Key</td><td>Col1</td></tr><tr><td></td><td>target</td><td>B" +
            "ob</td></tr><tr><td>target</td><td></td><td>Wrong</td></tr>")]
        public virtual void SpecifyKeyColumn_NotFirst()
        {
#line 34
this.SpecifyKeyColumn("not first", "target", "Bob", "<tr><td>other</td><td>Key</td><td>Col1</td></tr><tr><td></td><td>target</td><td>B" +
                    "ob</td></tr><tr><td>target</td><td></td><td>Wrong</td></tr>", ((string[])(null)));
#line hidden
        }
        
        public virtual void EnteringDataIntoTableWithHiddenInputs(string description, string target, string value, string table, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Entering data into table with hidden inputs", null, exampleTags);
#line 47
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Table"});
            table8.AddRow(new string[] {
                        string.Format("{0}", table)});
#line 48
 testRunner.Given("injecting browser content", ((string)(null)), table8, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Col1"});
            table9.AddRow(new string[] {
                        string.Format("{0}", target),
                        string.Format("{0}", value)});
#line 51
 testRunner.When("entering into Table", ((string)(null)), table9, "When ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Col1"});
            table10.AddRow(new string[] {
                        string.Format("{0}", target),
                        string.Format("{0}", value)});
#line 54
 testRunner.Then("the Table has values", ((string)(null)), table10, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Entering data into table with hidden inputs: before target")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Table Selectors")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SingleBrowser")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("injected-html")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "before target")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:description", "before target")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:target", "target")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:value", "Bob")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:table", "<tr><td>Key</td><td>Col1</td></tr><tr><td>target<input type=\"hidden\"/></td><td><i" +
            "nput type=\"text\"></td></tr>")]
        public virtual void EnteringDataIntoTableWithHiddenInputs_BeforeTarget()
        {
#line 47
this.EnteringDataIntoTableWithHiddenInputs("before target", "target", "Bob", "<tr><td>Key</td><td>Col1</td></tr><tr><td>target<input type=\"hidden\"/></td><td><i" +
                    "nput type=\"text\"></td></tr>", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Entering data into table with hidden inputs: after target")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Table Selectors")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SingleBrowser")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("injected-html")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "after target")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:description", "after target")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:target", "target")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:value", "Bob")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:table", "<tr><td>Key</td><td>Col1</td></tr><tr><td><input type=\"hidden\"/>target</td><td><i" +
            "nput type=\"text\"></td></tr>")]
        public virtual void EnteringDataIntoTableWithHiddenInputs_AfterTarget()
        {
#line 47
this.EnteringDataIntoTableWithHiddenInputs("after target", "target", "Bob", "<tr><td>Key</td><td>Col1</td></tr><tr><td><input type=\"hidden\"/>target</td><td><i" +
                    "nput type=\"text\"></td></tr>", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Entering data into table with hidden inputs: before label")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Table Selectors")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SingleBrowser")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("injected-html")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "before label")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:description", "before label")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:target", "target")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:value", "Bob")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:table", "<tr><td>Key</td><td>Col1</td></tr><tr><td><label>target</label><input type=\"hidde" +
            "n\"/></td><td><input type=\"text\"></td></tr>")]
        public virtual void EnteringDataIntoTableWithHiddenInputs_BeforeLabel()
        {
#line 47
this.EnteringDataIntoTableWithHiddenInputs("before label", "target", "Bob", "<tr><td>Key</td><td>Col1</td></tr><tr><td><label>target</label><input type=\"hidde" +
                    "n\"/></td><td><input type=\"text\"></td></tr>", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Entering data into table with hidden inputs: after label")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Table Selectors")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SingleBrowser")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("injected-html")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "after label")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:description", "after label")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:target", "target")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:value", "Bob")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:table", "<tr><td>Key</td><td>Col1</td></tr><tr><td><input type=\"hidden\"/><label>target</la" +
            "bel></td><td><input type=\"text\"></td></tr>")]
        public virtual void EnteringDataIntoTableWithHiddenInputs_AfterLabel()
        {
#line 47
this.EnteringDataIntoTableWithHiddenInputs("after label", "target", "Bob", "<tr><td>Key</td><td>Col1</td></tr><tr><td><input type=\"hidden\"/><label>target</la" +
                    "bel></td><td><input type=\"text\"></td></tr>", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Entering data into table with hidden inputs: before input")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Table Selectors")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SingleBrowser")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("injected-html")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "before input")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:description", "before input")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:target", "target")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:value", "Bob")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:table", "<tr><td>Key</td><td>Col1</td></tr><tr><td>target</td><td><input type=\"hidden\"><in" +
            "put type=\"text\"/></td></tr>")]
        public virtual void EnteringDataIntoTableWithHiddenInputs_BeforeInput()
        {
#line 47
this.EnteringDataIntoTableWithHiddenInputs("before input", "target", "Bob", "<tr><td>Key</td><td>Col1</td></tr><tr><td>target</td><td><input type=\"hidden\"><in" +
                    "put type=\"text\"/></td></tr>", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Entering data into table with hidden inputs: between lines")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Table Selectors")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SingleBrowser")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("injected-html")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "between lines")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:description", "between lines")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:target", "target")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:value", "Bob")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:table", "<tr><td>Key</td><td>Col1</td></tr><input type=\"hidden\"><tr><td>target</td><td><in" +
            "put type=\"text\"/></td></tr>")]
        public virtual void EnteringDataIntoTableWithHiddenInputs_BetweenLines()
        {
#line 47
this.EnteringDataIntoTableWithHiddenInputs("between lines", "target", "Bob", "<tr><td>Key</td><td>Col1</td></tr><input type=\"hidden\"><tr><td>target</td><td><in" +
                    "put type=\"text\"/></td></tr>", ((string[])(null)));
#line hidden
        }
        
        public virtual void FindingPropperCellsInTables(string description, string target, string value, string table, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Finding propper cells in tables", null, exampleTags);
#line 66
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Table"});
            table11.AddRow(new string[] {
                        string.Format("{0}", table)});
#line 67
 testRunner.Given("injecting browser content", ((string)(null)), table11, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Col1"});
            table12.AddRow(new string[] {
                        string.Format("{0}", target),
                        string.Format("{0}", value)});
#line 70
 testRunner.When("entering into Table", ((string)(null)), table12, "When ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Col1"});
            table13.AddRow(new string[] {
                        string.Format("{0}", target),
                        string.Format("{0}", value)});
#line 73
 testRunner.Then("the Table has values", ((string)(null)), table13, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Finding propper cells in tables: th simple text input")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Table Selectors")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SingleBrowser")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("injected-html")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "th simple text input")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:description", "th simple text input")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:target", "target")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:value", "Bob")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:table", "<tr><th>Key</th><th>Col1</th></tr><tr><td>target</td><td><input type=\"text\"/></td" +
            "></tr>")]
        public virtual void FindingPropperCellsInTables_ThSimpleTextInput()
        {
#line 66
this.FindingPropperCellsInTables("th simple text input", "target", "Bob", "<tr><th>Key</th><th>Col1</th></tr><tr><td>target</td><td><input type=\"text\"/></td" +
                    "></tr>", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Finding propper cells in tables: th noise text input")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Table Selectors")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SingleBrowser")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("injected-html")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "th noise text input")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:description", "th noise text input")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:target", "target")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:value", "Bob")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:table", "<tr><th>stuff</th><th>Key</th><th>Col1</th></tr><tr><td>junk</td><td>target</td><" +
            "td><input type=\"text\"/</td></tr>")]
        public virtual void FindingPropperCellsInTables_ThNoiseTextInput()
        {
#line 66
this.FindingPropperCellsInTables("th noise text input", "target", "Bob", "<tr><th>stuff</th><th>Key</th><th>Col1</th></tr><tr><td>junk</td><td>target</td><" +
                    "td><input type=\"text\"/</td></tr>", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Finding propper cells in tables: make sure columns are skipped")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Table Selectors")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SingleBrowser")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("injected-html")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "make sure columns are skipped")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:description", "make sure columns are skipped")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:target", "target")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:value", "Bob")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:table", "<tr><th>Other</th><th>Key</th><th>Col1</th></tr><tr><td>target</td><td>ignore</td" +
            "><td>Bad</td></tr><tr><td>ignore</td><td>target</td><td><input type=\"text\"/</td>" +
            "</tr>")]
        public virtual void FindingPropperCellsInTables_MakeSureColumnsAreSkipped()
        {
#line 66
this.FindingPropperCellsInTables("make sure columns are skipped", "target", "Bob", "<tr><th>Other</th><th>Key</th><th>Col1</th></tr><tr><td>target</td><td>ignore</td" +
                    "><td>Bad</td></tr><tr><td>ignore</td><td>target</td><td><input type=\"text\"/</td>" +
                    "</tr>", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Failed match")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Table Selectors")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SingleBrowser")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("injected-html")]
        public virtual void FailedMatch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Failed match", null, ((string[])(null)));
#line 82
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Table"});
            table14.AddRow(new string[] {
                        "<tr><th>Key</th><th>Col1</th></tr><tr><td>target</td><td><input type=\"text\"/></td" +
                            "></tr>"});
#line 83
 testRunner.Given("injecting browser content", ((string)(null)), table14, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Col1"});
            table15.AddRow(new string[] {
                        "target",
                        "Bob"});
#line 86
 testRunner.When("entering into Table", ((string)(null)), table15, "When ");
#line 89
 testRunner.Given("an error is expected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Col1"});
            table16.AddRow(new string[] {
                        "target",
                        "Marry"});
#line 90
 testRunner.Then("the Table has values", ((string)(null)), table16, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Message"});
            table17.AddRow(new string[] {
                        "/the value was \'Bob\' which was not \'Marry\'/"});
#line 93
 testRunner.Then("the Error has values", ((string)(null)), table17, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void FailedValidations(string description, string target, string value, string table, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Failed validations", null, exampleTags);
#line 97
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Table"});
            table18.AddRow(new string[] {
                        string.Format("{0}", table)});
#line 98
 testRunner.Given("injecting browser content", ((string)(null)), table18, "Given ");
#line 101
 testRunner.Given("an error is expected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Col1"});
            table19.AddRow(new string[] {
                        string.Format("{0}", target),
                        string.Format("{0}", value)});
#line 102
 testRunner.Then("the Table has values", ((string)(null)), table19, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Message"});
            table20.AddRow(new string[] {
                        "the value was \'Marry\' which was not \'Bob\'"});
#line 105
 testRunner.Then("the Error has values", ((string)(null)), table20, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Failed validations: simple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Table Selectors")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SingleBrowser")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("injected-html")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "simple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:description", "simple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:target", "target")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:value", "Bob")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:table", "<tr><th>Key</th><th>Col1</th></tr><tr><td>target</td><td>Marry</td></tr>")]
        public virtual void FailedValidations_Simple()
        {
#line 97
this.FailedValidations("simple", "target", "Bob", "<tr><th>Key</th><th>Col1</th></tr><tr><td>target</td><td>Marry</td></tr>", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Failed validations: text input")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Table Selectors")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SingleBrowser")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("injected-html")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "text input")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:description", "text input")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:target", "target")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:value", "Bob")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:table", "<tr><td>Key</td><td>Col1</td></tr><tr><td>target</td><td><input type=\"text\" value" +
            "=\"Marry\"/></td></tr>")]
        public virtual void FailedValidations_TextInput()
        {
#line 97
this.FailedValidations("text input", "target", "Bob", "<tr><td>Key</td><td>Col1</td></tr><tr><td>target</td><td><input type=\"text\" value" +
                    "=\"Marry\"/></td></tr>", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
